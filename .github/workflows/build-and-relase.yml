name: Build and Release SLS

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        architecture: [aarchThermal, x86_64]
        include:
          - os: macos-latest
            platform: macos
          - os: ubuntu-latest
            platform: linux

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Xcode with Swift 6.0.0 (macOS)
      - name: Select Xcode 16.0 (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          sudo xcode-select -s /Applications/Xcode.app
          swift --version

      # Install Swift 6.0.0 (Linux)
      - name: Install Swift 6.0.0 (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://download.swift.org/swift-6.0-release/ubuntu2204/swift-6.0-RELEASE/swift-6.0-RELEASE-ubuntu22.04.tar.gz
          tar xzf swift-6.0-RELEASE-ubuntu22.04.tar.gz
          sudo mv swift-6.0-RELEASE-ubuntu22.04 /usr/share/swift
          echo "/usr/share/swift/usr/bin" >> $GITHUB_PATH
          swift --version

      # Install binutils for strip (Linux)
      - name: Install binutils (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils

      # Build the executable
      - name: Build executable
        run: |
          EXECUTABLE_NAME="sls"
          OUTPUT_DIR="build_output"
          OUTPUT_BINARY="$OUTPUT_DIR/${EXECUTABLE_NAME}_${{ matrix.platform }}_${{ matrix.architecture }}"
          mkdir -p "$OUTPUT_DIR"

          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            if [[ "${{ matrix.architecture }}" == "aarch64" ]]; then
              swift build --arch arm64 -c release
              BUILD_OUTPUT_PATH=".build/arm64-apple-macosx/release/$EXECUTABLE_NAME"
            else
              swift build --arch x86_64 -c release
              BUILD_OUTPUT_PATH=".build/x86_64-apple-macosx/release/$EXECUTABLE_NAME"
            fi
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            if [[ "${{ matrix.architecture }}" == "aarch64" ]]; then
              swift build --swift-sdk aarch64-swift-linux-musl -c release -Xswiftc -Osize -Xcc -w
              BUILD_OUTPUT_PATH=".build/aarch64-swift-linux-musl/release/$EXECUTABLE_NAME"
            else
              swift build --swift-sdk x86_64-swift-linux-musl -c release -Xswiftc -Osize -Xcc -w
              BUILD_OUTPUT_PATH=".build/x86_64-swift-linux-musl/release/$EXECUTABLE_NAME"
            fi
          fi

          if [[ -f "$BUILD_OUTPUT_PATH" ]]; then
            mv "$BUILD_OUTPUT_PATH" "$OUTPUT_BINARY"
            chmod +x "$OUTPUT_BINARY"
            if [[ "${{ matrix.platform }}" == "linux" ]]; then
              strip "$OUTPUT_BINARY"
              echo "Stripped debugging symbols from $OUTPUT_BINARY"
            fi
            echo "Built $OUTPUT_BINARY"
          else
            echo "Failed to build for ${{ matrix.architecture }} on ${{ matrix.platform }}: Binary not found at $BUILD_OUTPUT_PATH"
            exit 1
          fi

      # Upload binaries as artifacts
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: sls-${{ matrix.platform }}-${{ matrix.architecture }}
          path: build_output/sls_${{ matrix.platform }}_${{ matrix.architecture }}

  release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Download all artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Generate version tag
      - name: Generate version tag
        id: version
        run: |
          # Use commit SHA or increment version based on existing tags
          VERSION="v1.3.3"  # Replace with dynamic versioning if needed
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Create and push git tag
      - name: Create and push git tag
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      # Create GitHub release
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}
          REPO=${{ github.repository }}

          # Create release
          RELEASE_DATA=$(cat <<EOF
          {
            "tag_name": "$VERSION",
            "name": "$VERSION",
            "body": "Release for sls",
            "draft": false,
            "prerelease": false
          }
          EOF
          )

          RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -X POST "https://api.github.com/repos/$REPO/releases" \
            -d "$RELEASE_DATA")

          # Extract upload_url
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | grep -o '"upload_url": "[^"]*' | cut -d'"' -f4 | sed 's/{?name,label}//')

          if [[ -z "$UPLOAD_URL" ]]; then
            echo "Failed to create release"
            echo "Response: $RELEASE_RESPONSE"
            exit 1
          fi

          # Upload binaries
          for BINARY in artifacts/sls-macos-aarch64/sls_macos_aarch64 \
                        artifacts/sls-macos-x86_64/sls_macos_x86_64 \
                        artifacts/sls-linux-aarch64/sls_linux_aarch64 \
                        artifacts/sls-linux-x86_64/sls_linux_x86_64; do
            BINARY_NAME=$(basename "$BINARY")
            echo "Uploading $BINARY_NAME..."
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$BINARY" \
              "$UPLOAD_URL?name=$BINARY_NAME"
          done
